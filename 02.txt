multithreaded!

#include <pthread.h>

#include "thread-safe-linked-list.h"

In this version, the multi-threads technology is used under the X86 architecture. 

pthread_t thread_pool[WORK_THREAD_NUM];

     gcc ParallelGrep.c -o pgrep -lpthread

We use N threads to grep a big file stimultanously based domain	decomposition method. The big file will be divided into N sub domains and then each thread is going to search PATTERN in one area. All threads exit when finished searching.

multithreaded!

 - For parallel grep multiple threads can scan a part with SIZE/N characters.

#include <pthread.h>

#include "thread-safe-linked-list.h"

    size_t read;

    Suppose we have 4 threads

        Thread :     0               1               2             3

#include <sys/types.h>                  /* For opendir(), readdir(), closedir()   */

In this version, the multi-threads technology is used under the X86 architecture. 

#include <sys/types.h>                  /* For opendir(), readdir(), closedir()   */

When grepping directories recursively, there are many files to deal with.Thus, it is far away from efficiency to create and destroy threads frequently for each file. Instead of domain decomposition is excluded, we maintain a thread pool and let each thread retrieving file from free task list. Therefore, many files will be addressed in the same time by different threads. So, it is called "Coarse Parallel". Finally, when free list is empty as well as all threads finish the thread pool is destroyed.

     gcc ParallelGrep.c -o pgrep -lpthread

Such as, the main thread will add the new file into to Tail while each thread gets task from the Head.

#include <pthread.h>                    /* For pthread_ functions           */ 

#include <pthread.h>                    /* For pthread_ functions           */ 

	Main thread add and work thread retrieve:

pthread_t thread_pool[WORK_THREAD_NUM];

        Suppose we have 2 work threads.

                    Thread1    Thread2     Head                                         Tail

    while ((read = getline(&buf, &buf_size, file)) != -1) {

        /* num bytes read + size of file name + 3 bytes for colons, line

       | Dir Size (MB)   |   standard grep  |  2 threads  | 4 threads  |  8 threads  |

        if ((line = calloc(1, read + strlen(file_display_name) + 3 + 1 + 1)) == NULL) {

pthread_t workThread[THREADSNUM];

We use N threads to grep a big file stimultanously based domain	decomposition method. The big file will be divided into N sub domains and then each thread is going to search PATTERN in one area. All threads exit when finished searching.

pthread_t workThreadPool[THREADSNUM];

static pthread_mutex_t  workThreadPoolMux               = PTHREAD_MUTEX_INITIALIZER;

//static pthread_cond_t   workThreadPoolCond              = PTHREAD_COND_INITIALIZER; 

pthread_t workThread[THREADSNUM];

pthread_t workThreadPool[THREADSNUM];

static pthread_mutex_t  workThreadPoolMux               = PTHREAD_MUTEX_INITIALIZER;

//static pthread_cond_t   workThreadPoolCond              = PTHREAD_COND_INITIALIZER; 

 *Note: One reason to limit the performance for current parallel program is that the sequential algorithm is more slower than stardard grep. So that we can't get expected speedup even there is little dependence between each threads.*

          include a readable copy of the attribution notices contained

 * NOT in order for output: since each thread prints out the results seperately, the matched line will be mixed.

    size_t read;

* Improve method reading IO

* Adjust the number of work threads automatically

    where all tasks have been removed, but a thread is still parsing

void *file_reader(void *arg) {

    if (pthread_detach(pthread_self()) != 0) {

 - For parallel grep multiple threads can scan a part with SIZE/N characters.

        perror("thread detach error");

    while ((read = getline(&buf, &buf_size, file)) != -1) {

            printf("Thread exiting\n");

            pthread_exit(NULL);

    Suppose we have 4 threads

        /* num bytes read + size of file name + 3 bytes for colons, line

 * function    : workThreadPoolFun

void init_thread_pool() {

 * description : The work thread from thread pool. 

        Thread :     0               1               2             3

          include a readable copy of the attribution notices contained

workThreadPoolFun(void *arg)

        if ((line = calloc(1, read + strlen(file_display_name) + 3 + 1 + 1)) == NULL) {

        pthread_mutex_lock(&workThreadPoolMux);

		    // TODO: Awake by a signal from main thread to avoid "while" loop 

When grepping directories recursively, there are many files to deal with.Thus, it is far away from efficiency to create and destroy threads frequently for each file. Instead of domain decomposition is excluded, we maintain a thread pool and let each thread retrieving file from free task list. Therefore, many files will be addressed in the same time by different threads. So, it is called "Coarse Parallel". Finally, when free list is empty as well as all threads finish the thread pool is destroyed.

        if ((err = pthread_create(&thread_pool[i], NULL, file_reader, NULL)) != 0) {

Such as, the main thread will add the new file into to Tail while each thread gets task from the Head.

        //pthread_cond_wait(&workThreadPoolCond, &workThreadPoolMux);

            perror("pthread_create error");

	Main thread add and work thread retrieve:

            pthread_mutex_unlock(&workThreadPoolMux);

    init_thread_pool();

        Suppose we have 2 work threads.

 * function    : workThreadPoolFun

                    Thread1    Thread2     Head                                         Tail

 * description : The work thread from thread pool. 

workThreadPoolFun(void *arg)

        pthread_mutex_lock(&workThreadPoolMux);

		    // TODO: Awake by a signal from main thread to avoid "while" loop 

        //pthread_cond_wait(&workThreadPoolCond, &workThreadPoolMux);

            pthread_mutex_unlock(&workThreadPoolMux);

                pthread_mutex_unlock(&workThreadPoolMux);

                pthread_mutex_unlock(&workThreadPoolMux);

                pthread_exit(NULL);

                pthread_exit(NULL);

       | Dir Size (MB)   |   standard grep  |  2 threads  | 4 threads  |  8 threads  |

            pthread_mutex_unlock(&workThreadPoolMux);

            pthread_mutex_unlock(&workThreadPoolMux);

 * function    : initThreadPool

 * function    : initThreadPool

 * description : create THREADSNUM threads to work later.

 *Note: One reason to limit the performance for current parallel program is that the sequential algorithm is more slower than stardard grep. So that we can't get expected speedup even there is little dependence between each threads.*

    where all tasks have been removed, but a thread is still parsing

 * return      : return number of available threads.

initThreadPool() 

    // create threads pool

        error = pthread_create(&workThreadPool[i], NULL, workThreadPoolFun, NULL);

 * description : create THREADSNUM threads to work later.

void *file_reader(void *arg) {

    if (pthread_detach(pthread_self()) != 0) {

 * function    : joinThreadPool

 * description : wait all threads finish.

joinThreadPool() 

        perror("thread detach error");

 * return      : return number of available threads.

    // wait working thread to join

            printf("Thread exiting\n");

 * NOT in order for output: since each thread prints out the results seperately, the matched line will be mixed.

            pthread_exit(NULL);

        pthread_join(workTh
initThreadPool() 

    // create threads pool

        error = pthread_create(&workThreadPool[i], NULL, workThreadPoolFun, NULL);

* Improve method reading IO

* Adjust the number of work threads automatically

 * function    : joinThreadPool

void init_thread_pool() {

 * description : wait all threads finish.

        if ((err = pthread_create(&thread_pool[i], NULL, file_reader, NULL)) != 0) {

            perror("pthread_create error");

joinThreadPool() 

    // wait working thread to join

    init_thread_pool();

        pthread_join(workT